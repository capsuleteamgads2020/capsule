{"remainingRequest":"/Users/mac/Documents/Projects/GADS2020/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/mac/Documents/Projects/GADS2020/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mac/Documents/Projects/GADS2020/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mac/Documents/Projects/GADS2020/frontend/src/views/Privacy.vue?vue&type=template&id=30c91384&scoped=true&","dependencies":[{"path":"/Users/mac/Documents/Projects/GADS2020/frontend/src/views/Privacy.vue","mtime":1603924470990},{"path":"/Users/mac/Documents/Projects/GADS2020/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Documents/Projects/GADS2020/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/mac/Documents/Projects/GADS2020/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Documents/Projects/GADS2020/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHJlZjogIiIsIHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiwgY2xhc3M6IHsgYWN0aXZlOiBfdm0ubWVudSB9IH0sCiAgICBbX2MoIkhlYWRlciIsIHsgb246IHsgdG9nZ2xlTWVudTogX3ZtLnRvZ2dsZU1lbnUgfSB9KSwgX3ZtLl9tKDApXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHJpdmFjeSIgfSwgWwogICAgICBfYygic2VjdGlvbiIsIHt9LCBbCiAgICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogInByaXZhY3ktLXRpdGxlIiB9LCBbX3ZtLl92KCJwcml2YWN5IG9mIFVzZSIpXSksCiAgICAgICAgX2MoImg0IiwgW192bS5fdigiTGFzdCB1cGRhdGVkIG9uIDMwdGggT2N0b2JlciAyMDIwIildKSwKICAgICAgICBfYygiaHIiLCB7CiAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAiYmFja2dyb3VuZC1pbWFnZSI6CiAgICAgICAgICAgICAgIi13ZWJraXQtbGluZWFyLWdyYWRpZW50KGxlZnQsICNmZWU3ZDAsICNmYzg5MTcsICNmZWU3ZDApIiwKICAgICAgICAgICAgaGVpZ2h0OiAiMC4ycmVtIiwKICAgICAgICAgICAgYm9yZGVyOiAiMCIsCiAgICAgICAgICAgIG1hcmdpbjogIjJyZW0gMCIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX2MoInNlY3Rpb24iLCBbCiAgICAgICAgX2MoImgzIiwgW192bS5fdigiSU5UUk9EVUNUSU9OIEFORCBBQ0NFUFRBTkNFIE9GIHByaXZhY3kiKV0pLAogICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInByaXZhY3ktLWJvZHkiIH0sIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJyBDYXBzdWxlLCBJbmMuIChjb2xsZWN0aXZlbHksICJ3ZSwiICJ1cyIgb3IgIkNhcHN1bGUiKSBwcm92aWRlcyB5b3UgYWNjZXNzIHRvIHRoZSBDYXBzdWxlIFNlcnZpY2VzIChkZWZpbmVkIGJlbG93KSBzdWJqZWN0IHRvIHRoZSBwcml2YWN5IGFuZCBjb25kaXRpb25zIGRlc2NyaWJlZCBpbiB0aGlzIGRvY3VtZW50ICh0aGlzICJwcml2YWN5IG9mIFVzZSIpIGFuZCBhbnkgb3RoZXIgZ3VpZGVsaW5lcywgcnVsZXMgb3IgbGljZW5zZXMgcG9zdGVkIGluIGNvbm5lY3Rpb24gd2l0aCBhbnkgT25saW5lIENvbW11bml0eSAoZGVmaW5lZCBiZWxvdykuIFRoaXMgcHJpdmFjeSBvZiBVc2UgYWxzbyBpbmNsdWRlcyBvdXIgUHJpdmFjeSBQb2xpY3ksIGluY29ycG9yYXRlZCBieSB0aGlzIHJlZmVyZW5jZS4gQnkgdXNpbmcgdGhpcyBTZXJ2aWNlLCBjbGlja2luZyDigJxJIEFncmVl4oCdLCByZWdpc3RlcmluZyBhIFVzZXIgQWNjb3VudCAoZGVmaW5lZCBiZWxvdyksIHB1cmNoYXNpbmcgYW4gT25saW5lIENvbW11bml0eSwgb3IgYnkgaW5kaWNhdGluZyB5b3VyIGFncmVlbWVudCB0byB0aGlzIHByaXZhY3kgb2YgVXNlIHRocm91Z2ggYSBzaW1pbGFyIG1lY2hhbmlzbSwgeW91IGFyZSBhZ3JlZWluZyB0byBiZSBib3VuZCBieSB0aGlzIHByaXZhY3kgb2YgVXNlLiBJZiB5b3UgZG8gbm90IGFncmVlIHRvIHRoaXMgcHJpdmFjeSBvZiBVc2UsIGRvIG5vdCB1c2UgdGhlIFNlcnZpY2VzLiBJZiB5b3UgdW5kZXIgdGhlIGFnZSBvZiAxOCwgYnV0IGF0IGxlYXN0IDEzIHllYXJzIG9mIGFnZSwgeW91IHJlcHJlc2VudCBhbmQgYWdyZWUgdGhhdCB5b3UgYXJlIGFuIGVtYW5jaXBhdGVkIG1pbm9yIG9yIHBvc3Nlc3MgbGVnYWwgcGFyZW50YWwgb3IgZ3VhcmRpYW4gY29uc2VudCB0byB1c2UgdGhlIFNlcnZpY2VzIGFuZCBhcmUgZnVsbHkgYWJsZSBhbmQgY29tcGV0ZW50IHRvIGVudGVyIGludG8gYWxsIG9mIHRoZSBjb25kaXRpb25zLCBvYmxpZ2F0aW9ucywgYWZmaXJtYXRpb25zLCByZXByZXNlbnRhdGlvbnMgYW5kIHdhcnJhbnRpZXMgc2V0IGZvcnRoIGluIHRoaXMgcHJpdmFjeSBvZiBVc2UuIFRoZSBTZXJ2aWNlcyBhcmUgbm90IGludGVuZGVkIGZvciwgbm9yIGRpcmVjdGVkIGF0LCBpbmRpdmlkdWFscyB1bmRlciB0aGUgYWdlIG9mIDEzIChvciB1bmRlciB0aGUgYXBwbGljYWJsZSBhZ2Ugb2YgY29uc2VudCBpbiB5b3VyIGp1cmlzZGljdGlvbik7IGlmIHlvdSBhcmUgdW5kZXIgMTMgeWVhcnMgb2YgYWdlIChvciB0aGUgYXBwbGljYWJsZSBhZ2Ugb2YgY29uc2VudCBpbiB5b3VyIGp1cmlzZGljdGlvbiksIGRvIG5vdCB1c2UgdGhlIFNlcnZpY2VzLiAnCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImgzIiwgW192bS5fdigiQUNDRVNTIEFORCBVU0VSIEFDQ09VTlRTIildKSwKICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJwcml2YWN5LS1ib2R5IiB9LCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgQWNjZXNzOiBUaGVyZSBhcmUgZGlmZmVyZW50IHdheXMgaW4gd2hpY2ggeW91IG1heSBhY2Nlc3Mgb3IgdXNlIHRoZSBTZXJ2aWNlcy4gSW4gZWFjaCBhbmQgZXZlcnkgaW5zdGFuY2UsIHlvdSBhcmUgb25seSBhdXRob3JpemVkIHRvIHVzZSB0aGUgU2VydmljZXMgaWYgeW91IGFncmVlIHRvIGFiaWRlIGJ5IGFsbCBhcHBsaWNhYmxlIGxhd3MsIHJ1bGVzLCByZWd1bGF0aW9ucywgYXMgd2VsbCBhcyB0aGlzIHByaXZhY3kgb2YgVXNlLiBZb3UgbWF5IGFjY2VzcyB0aGUgU2VydmljZXMgYXM6ICIKICAgICAgICAgICksCiAgICAgICAgICBfYygidWwiLCB7IHN0YXRpY0NsYXNzOiAicHJpdmFjeS0tbGlzdCIgfSwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgJ2EgIlZpc2l0b3IsIiBtZWFuaW5nIGFueSBpbmRpdmlkdWFsIHRoYXQgYnJvd3NlcyBhbnkgb2Ygb3VyIFNlcnZpY2VzLCBpbmNsdWRpbmcsIHdpdGhvdXQgbGltaXRhdGlvbiwnCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIHRocm91Z2ggYSBtb2JpbGUgb3Igb3RoZXIgd2lyZWxlc3MgZGV2aWNlIHdpdGhvdXQgYmVpbmcgcmVnaXN0ZXJlZCwiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICdhICJTdHVkZW50LCIgbWVhbmluZyB0aGF0IHlvdSBoYXZlIGNyZWF0ZWQgYSBVc2VyIEFjY291bnQgKGRlZmluZWQgYmVsb3cpIHJlZ2lzdGVyZWQgYW5kIGhhdmUgZW5yb2xsZWQgaW4gJwogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBhbmQgcGFpZCBmb3IgYWNjZXNzIHRvIHRoZSBPbmxpbmUgQ29tbXVuaXRpZXNlcyBhbmQgb3RoZXIgQ2Fwc3VsZeKAmXMgU2VydmljZXMgYW5kL29yIHNlcnZpY2VzLCBjb250ZW50LCBhbmQvb3IgY2VydGlmaWNhdGlvbiBwcm92aWRlZCBieSBIZWFsdGggUGFydG5lcnMgIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBhbmQgdGhhdCB5b3UgaW50ZW5kIHRvIGNvbXBsZXRlIHRoZSBhcHBsaWNhYmxlIHByb2dyYW0sIGluY2x1ZGluZyB0aGUgaG9tZXdvcmsgYXNzaWdubWVudHMgYW5kIGV4YW1zLCBhbmQgb3RoZXIgcmVxdWlyZW1lbnRzIHJlbGF0ZWQgdG8gdGhvc2UgaW5kaXZpZHVhbCBwcm9ncmFtcy4iCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICdhbiAiQXR0ZW5kZWUsIiBtZWFuaW5nIHRoYXQgeW91IGhhdmUgY3JlYXRlZCBhIFVzZXIgQWNjb3VudCBhbmQgdGhhdCB5b3UgaW50ZW5kIHRvIGF1ZGl0IHRoZSBPbmxpbmUgQ29tbXVuaXRpZXNlcywgJwogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBpLmUuLCBhdHRlbmQgb3IgdmlldyBsZWN0dXJlcyBvbmxpbmUgd2l0aG91dCBhY2Nlc3NpbmcgZmluYWwgcHJvamVjdHMgb3IgYXNzZXNzbWVudHMgcmVxdWlyZWQgZm9yIGNlcnRpZmljYXRpb24sIG9yIGNvbXBsZXRpbmcgdGhlIGhvbWV3b3JrIGFzc2lnbm1lbnRzLCAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIGV4YW1zIG9yIG90aGVyIENvbW11bml0aWVzZSB3b3JrIHJlbGF0ZWQgdG8gYXNzZXNzbWVudHMgZm9yIGNlcnRpZmljYXRpb24uIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiYSDigJxNZW50b3LigJ0gbWVhbmluZyB0aGF0IHlvdSBoYXZlIGEgVXNlciBBY2NvdW50IGFuZCBoYXZlIGVudGVyZWQgaW50byB0aGUgTWVudG9yIFNlcnZpY2VzIEFncmVlbWVudCB3aXRoIENhcHN1bGUgdG8gcHJvdmlkZSBtZW50b3JpbmcgYW5kIHByb2plY3QgcmV2aWV3IHNlcnZpY2VzIHRvIFN0dWRlbnRzLiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJyBUaGUgdGVybSAiVXNlciIgcmVmZXJzIHRvIGEgVmlzaXRvciwgU3R1ZGVudCwgQXR0ZW5kZWUsIE1lbnRvciwgb3IgYW55IG90aGVyIHBlcnNvbiB0aGF0IHBhcnRpY2lwYXRlcywgaW50ZXJhY3RzIHdpdGgsIG9yIG90aGVyd2lzZSBtYWtlcyB1c2Ugb2YgYW55IG9mIHRoZSBTZXJ2aWNlcyBhbmQvb3IgYW55IENhcHN1bGUgY29tbXVuaXR5IChlLmcuLCBtb2RlcmF0b3JzLCB2b2x1bnRlZXJzLCBvciBleHBlcnRzLWluLXJlc2lkZW5jZSkgJwogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}