{"remainingRequest":"/Users/mac/Documents/Projects/GADS2020/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/mac/Documents/Projects/GADS2020/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mac/Documents/Projects/GADS2020/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mac/Documents/Projects/GADS2020/frontend/src/views/Terms.vue?vue&type=template&id=655c1786&scoped=true&","dependencies":[{"path":"/Users/mac/Documents/Projects/GADS2020/frontend/src/views/Terms.vue","mtime":1603924448784},{"path":"/Users/mac/Documents/Projects/GADS2020/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Documents/Projects/GADS2020/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/mac/Documents/Projects/GADS2020/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Documents/Projects/GADS2020/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHJlZjogIiIsIHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiwgY2xhc3M6IHsgYWN0aXZlOiBfdm0ubWVudSB9IH0sCiAgICBbX2MoIkhlYWRlciIsIHsgb246IHsgdG9nZ2xlTWVudTogX3ZtLnRvZ2dsZU1lbnUgfSB9KSwgX3ZtLl9tKDApXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGVybXMiIH0sIFsKICAgICAgX2MoInNlY3Rpb24iLCB7fSwgWwogICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXJtcy0tdGl0bGUiIH0sIFtfdm0uX3YoIlRlcm1zIG9mIFVzZSIpXSksCiAgICAgICAgX2MoImg0IiwgW192bS5fdigiTGFzdCB1cGRhdGVkIG9uIDMwdGggT2N0b2JlciAyMDIwIildKSwKICAgICAgICBfYygiaHIiLCB7CiAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAiYmFja2dyb3VuZC1pbWFnZSI6CiAgICAgICAgICAgICAgIi13ZWJraXQtbGluZWFyLWdyYWRpZW50KGxlZnQsICNmZWU3ZDAsICNmYzg5MTcsICNmZWU3ZDApIiwKICAgICAgICAgICAgaGVpZ2h0OiAiMC4ycmVtIiwKICAgICAgICAgICAgYm9yZGVyOiAiMCIsCiAgICAgICAgICAgIG1hcmdpbjogIjJyZW0gMCIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX2MoInNlY3Rpb24iLCBbCiAgICAgICAgX2MoImgzIiwgW192bS5fdigiSU5UUk9EVUNUSU9OIEFORCBBQ0NFUFRBTkNFIE9GIFRFUk1TIildKSwKICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXJtcy0tYm9keSIgfSwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAnIENhcHN1bGUsIEluYy4gKGNvbGxlY3RpdmVseSwgIndlLCIgInVzIiBvciAiQ2Fwc3VsZSIpIHByb3ZpZGVzIHlvdSBhY2Nlc3MgdG8gdGhlIENhcHN1bGUgU2VydmljZXMgKGRlZmluZWQgYmVsb3cpIHN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIGRlc2NyaWJlZCBpbiB0aGlzIGRvY3VtZW50ICh0aGlzICJUZXJtcyBvZiBVc2UiKSBhbmQgYW55IG90aGVyIGd1aWRlbGluZXMsIHJ1bGVzIG9yIGxpY2Vuc2VzIHBvc3RlZCBpbiBjb25uZWN0aW9uIHdpdGggYW55IE9ubGluZSBDb21tdW5pdHkgKGRlZmluZWQgYmVsb3cpLiBUaGlzIFRlcm1zIG9mIFVzZSBhbHNvIGluY2x1ZGVzIG91ciBQcml2YWN5IFBvbGljeSwgaW5jb3Jwb3JhdGVkIGJ5IHRoaXMgcmVmZXJlbmNlLiBCeSB1c2luZyB0aGlzIFNlcnZpY2UsIGNsaWNraW5nIOKAnEkgQWdyZWXigJ0sIHJlZ2lzdGVyaW5nIGEgVXNlciBBY2NvdW50IChkZWZpbmVkIGJlbG93KSwgcHVyY2hhc2luZyBhbiBPbmxpbmUgQ29tbXVuaXR5LCBvciBieSBpbmRpY2F0aW5nIHlvdXIgYWdyZWVtZW50IHRvIHRoaXMgVGVybXMgb2YgVXNlIHRocm91Z2ggYSBzaW1pbGFyIG1lY2hhbmlzbSwgeW91IGFyZSBhZ3JlZWluZyB0byBiZSBib3VuZCBieSB0aGlzIFRlcm1zIG9mIFVzZS4gSWYgeW91IGRvIG5vdCBhZ3JlZSB0byB0aGlzIFRlcm1zIG9mIFVzZSwgZG8gbm90IHVzZSB0aGUgU2VydmljZXMuIElmIHlvdSB1bmRlciB0aGUgYWdlIG9mIDE4LCBidXQgYXQgbGVhc3QgMTMgeWVhcnMgb2YgYWdlLCB5b3UgcmVwcmVzZW50IGFuZCBhZ3JlZSB0aGF0IHlvdSBhcmUgYW4gZW1hbmNpcGF0ZWQgbWlub3Igb3IgcG9zc2VzcyBsZWdhbCBwYXJlbnRhbCBvciBndWFyZGlhbiBjb25zZW50IHRvIHVzZSB0aGUgU2VydmljZXMgYW5kIGFyZSBmdWxseSBhYmxlIGFuZCBjb21wZXRlbnQgdG8gZW50ZXIgaW50byBhbGwgb2YgdGhlIGNvbmRpdGlvbnMsIG9ibGlnYXRpb25zLCBhZmZpcm1hdGlvbnMsIHJlcHJlc2VudGF0aW9ucyBhbmQgd2FycmFudGllcyBzZXQgZm9ydGggaW4gdGhpcyBUZXJtcyBvZiBVc2UuIFRoZSBTZXJ2aWNlcyBhcmUgbm90IGludGVuZGVkIGZvciwgbm9yIGRpcmVjdGVkIGF0LCBpbmRpdmlkdWFscyB1bmRlciB0aGUgYWdlIG9mIDEzIChvciB1bmRlciB0aGUgYXBwbGljYWJsZSBhZ2Ugb2YgY29uc2VudCBpbiB5b3VyIGp1cmlzZGljdGlvbik7IGlmIHlvdSBhcmUgdW5kZXIgMTMgeWVhcnMgb2YgYWdlIChvciB0aGUgYXBwbGljYWJsZSBhZ2Ugb2YgY29uc2VudCBpbiB5b3VyIGp1cmlzZGljdGlvbiksIGRvIG5vdCB1c2UgdGhlIFNlcnZpY2VzLiAnCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImgzIiwgW192bS5fdigiQUNDRVNTIEFORCBVU0VSIEFDQ09VTlRTIildKSwKICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXJtcy0tYm9keSIgfSwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIEFjY2VzczogVGhlcmUgYXJlIGRpZmZlcmVudCB3YXlzIGluIHdoaWNoIHlvdSBtYXkgYWNjZXNzIG9yIHVzZSB0aGUgU2VydmljZXMuIEluIGVhY2ggYW5kIGV2ZXJ5IGluc3RhbmNlLCB5b3UgYXJlIG9ubHkgYXV0aG9yaXplZCB0byB1c2UgdGhlIFNlcnZpY2VzIGlmIHlvdSBhZ3JlZSB0byBhYmlkZSBieSBhbGwgYXBwbGljYWJsZSBsYXdzLCBydWxlcywgcmVndWxhdGlvbnMsIGFzIHdlbGwgYXMgdGhpcyBUZXJtcyBvZiBVc2UuIFlvdSBtYXkgYWNjZXNzIHRoZSBTZXJ2aWNlcyBhczogIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXJtcy0tbGlzdCIgfSwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgJ2EgIlZpc2l0b3IsIiBtZWFuaW5nIGFueSBpbmRpdmlkdWFsIHRoYXQgYnJvd3NlcyBhbnkgb2Ygb3VyIFNlcnZpY2VzLCBpbmNsdWRpbmcsIHdpdGhvdXQgbGltaXRhdGlvbiwnCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIHRocm91Z2ggYSBtb2JpbGUgb3Igb3RoZXIgd2lyZWxlc3MgZGV2aWNlIHdpdGhvdXQgYmVpbmcgcmVnaXN0ZXJlZCwiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICdhICJTdHVkZW50LCIgbWVhbmluZyB0aGF0IHlvdSBoYXZlIGNyZWF0ZWQgYSBVc2VyIEFjY291bnQgKGRlZmluZWQgYmVsb3cpIHJlZ2lzdGVyZWQgYW5kIGhhdmUgZW5yb2xsZWQgaW4gJwogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBhbmQgcGFpZCBmb3IgYWNjZXNzIHRvIHRoZSBPbmxpbmUgQ29tbXVuaXRpZXNlcyBhbmQgb3RoZXIgQ2Fwc3VsZeKAmXMgU2VydmljZXMgYW5kL29yIHNlcnZpY2VzLCBjb250ZW50LCBhbmQvb3IgY2VydGlmaWNhdGlvbiBwcm92aWRlZCBieSBIZWFsdGggUGFydG5lcnMgIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBhbmQgdGhhdCB5b3UgaW50ZW5kIHRvIGNvbXBsZXRlIHRoZSBhcHBsaWNhYmxlIHByb2dyYW0sIGluY2x1ZGluZyB0aGUgaG9tZXdvcmsgYXNzaWdubWVudHMgYW5kIGV4YW1zLCBhbmQgb3RoZXIgcmVxdWlyZW1lbnRzIHJlbGF0ZWQgdG8gdGhvc2UgaW5kaXZpZHVhbCBwcm9ncmFtcy4iCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICdhbiAiQXR0ZW5kZWUsIiBtZWFuaW5nIHRoYXQgeW91IGhhdmUgY3JlYXRlZCBhIFVzZXIgQWNjb3VudCBhbmQgdGhhdCB5b3UgaW50ZW5kIHRvIGF1ZGl0IHRoZSBPbmxpbmUgQ29tbXVuaXRpZXNlcywgJwogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBpLmUuLCBhdHRlbmQgb3IgdmlldyBsZWN0dXJlcyBvbmxpbmUgd2l0aG91dCBhY2Nlc3NpbmcgZmluYWwgcHJvamVjdHMgb3IgYXNzZXNzbWVudHMgcmVxdWlyZWQgZm9yIGNlcnRpZmljYXRpb24sIG9yIGNvbXBsZXRpbmcgdGhlIGhvbWV3b3JrIGFzc2lnbm1lbnRzLCAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIGV4YW1zIG9yIG90aGVyIENvbW11bml0aWVzZSB3b3JrIHJlbGF0ZWQgdG8gYXNzZXNzbWVudHMgZm9yIGNlcnRpZmljYXRpb24uIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiYSDigJxNZW50b3LigJ0gbWVhbmluZyB0aGF0IHlvdSBoYXZlIGEgVXNlciBBY2NvdW50IGFuZCBoYXZlIGVudGVyZWQgaW50byB0aGUgTWVudG9yIFNlcnZpY2VzIEFncmVlbWVudCB3aXRoIENhcHN1bGUgdG8gcHJvdmlkZSBtZW50b3JpbmcgYW5kIHByb2plY3QgcmV2aWV3IHNlcnZpY2VzIHRvIFN0dWRlbnRzLiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJyBUaGUgdGVybSAiVXNlciIgcmVmZXJzIHRvIGEgVmlzaXRvciwgU3R1ZGVudCwgQXR0ZW5kZWUsIE1lbnRvciwgb3IgYW55IG90aGVyIHBlcnNvbiB0aGF0IHBhcnRpY2lwYXRlcywgaW50ZXJhY3RzIHdpdGgsIG9yIG90aGVyd2lzZSBtYWtlcyB1c2Ugb2YgYW55IG9mIHRoZSBTZXJ2aWNlcyBhbmQvb3IgYW55IENhcHN1bGUgY29tbXVuaXR5IChlLmcuLCBtb2RlcmF0b3JzLCB2b2x1bnRlZXJzLCBvciBleHBlcnRzLWluLXJlc2lkZW5jZSkgJwogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}