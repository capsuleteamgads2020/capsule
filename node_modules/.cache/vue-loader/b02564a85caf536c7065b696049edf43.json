{"remainingRequest":"/Users/mac/Documents/Projects/GADS/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/mac/Documents/Projects/GADS/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mac/Documents/Projects/GADS/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mac/Documents/Projects/GADS/frontend/src/components/user/Project.vue?vue&type=template&id=31fc0376&scoped=true&","dependencies":[{"path":"/Users/mac/Documents/Projects/GADS/frontend/src/components/user/Project.vue","mtime":1603963273199},{"path":"/Users/mac/Documents/Projects/GADS/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Documents/Projects/GADS/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/mac/Documents/Projects/GADS/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Documents/Projects/GADS/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}