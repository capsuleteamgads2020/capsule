{"remainingRequest":"/Users/mac/Documents/Projects/GADS/frontend/node_modules/babel-loader/lib/index.js!/Users/mac/Documents/Projects/GADS/frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/mac/Documents/Projects/GADS/frontend/src/services/commentsApi.js","dependencies":[{"path":"/Users/mac/Documents/Projects/GADS/frontend/src/services/commentsApi.js","mtime":1603954666524},{"path":"/Users/mac/Documents/Projects/GADS/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Documents/Projects/GADS/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mac/Documents/Projects/GADS/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:J3VzZSBzdHJpY3QnOyAvLyBpbXBvcnQgYXBpIGZyb20gJ0Avc2VydmljZXMvYXBpJwoKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL21hYy9Eb2N1bWVudHMvUHJvamVjdHMvR0FEUy9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmV4cG9ydCBkZWZhdWx0IHsKICBnZXRDb21tZW50czogZnVuY3Rpb24gZ2V0Q29tbWVudHMoaWRUb2tlbikgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgdmFyIHJlczsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBheGlvcyh7CiAgICAgICAgICAgICAgICBtZXRob2Q6ICdnZXQnLAogICAgICAgICAgICAgICAgdXJsOiAiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3YxL2NvbW1lbnRzL2ZldGNoQWxsIiwKICAgICAgICAgICAgICAgIC8vIHVybDogYGh0dHBzOi8vYXBpLmFsZ29ib2FyZC5jb20vdjEvY29tbWVudHMvZmV0Y2hBbGxgLAogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICJCZWFyZXIgIi5jb25jYXQoaWRUb2tlbikKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBqc29uOiB0cnVlCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCByZXMpOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlKTsKICAgIH0pKSgpOwogIH0sCiAgYWRkQ29tbWVudDogZnVuY3Rpb24gYWRkQ29tbWVudChpZFRva2VuLCBwYXJhbXMpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICB2YXIgcmVzOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MoewogICAgICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsCiAgICAgICAgICAgICAgICB1cmw6ICJodHRwOi8vbG9jYWxob3N0OjgwODAvdjEvY29tbWVudHMvYWRkT25lIiwKICAgICAgICAgICAgICAgIC8vIHVybDogYGh0dHBzOi8vYXBpLmFsZ29ib2FyZC5jb20vdjEvY29tbWVudHMvYWRkT25lYCwKICAgICAgICAgICAgICAgIC8vIGRhdGE6IHBhcmFtcywKICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLAogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICJCZWFyZXIgIi5jb25jYXQoaWRUb2tlbikKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBqc29uOiB0cnVlCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIHJlcyk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMik7CiAgICB9KSkoKTsKICB9LAogIHVwZGF0ZUNvbW1lbnQ6IGZ1bmN0aW9uIHVwZGF0ZUNvbW1lbnQoaWRUb2tlbiwgcGFyYW1zKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgdmFyIHJlczsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zKHsKICAgICAgICAgICAgICAgIG1ldGhvZDogJ3B1dCcsCiAgICAgICAgICAgICAgICB1cmw6ICJodHRwOi8vbG9jYWxob3N0OjgwODAvdjEvY29tbWVudHMvdXBkYXRlT25lLyIuY29uY2F0KHBhcmFtcy5pZCksCiAgICAgICAgICAgICAgICAvLyB1cmw6IGBodHRwczovL2FwaS5hbGdvYm9hcmQuY29tL3YxL2NvbW1lbnRzL3VwZGF0ZU9uZS8ke3BhcmFtcy5pZH1gLAogICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSwKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAiQmVhcmVyICIuY29uY2F0KGlkVG9rZW4pCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAganNvbjogdHJ1ZQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCByZXMpOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTMpOwogICAgfSkpKCk7CiAgfSwKICBnZXRDb21tZW50OiBmdW5jdGlvbiBnZXRDb21tZW50KGNvbW1lbnRfaWQsIGlkVG9rZW4pIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkgewogICAgICB2YXIgcmVzOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MoewogICAgICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JywKICAgICAgICAgICAgICAgIHVybDogImh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC92MS9wcm9qZWN0cy9mZXRjaE9uZS8iLmNvbmNhdChjb21tZW50X2lkKSwKICAgICAgICAgICAgICAgIC8vIHVybDogYGh0dHBzOi8vYXBpLmFsZ29ib2FyZC5jb20vdjEvY29tbWVudHMvZmV0Y2hPbmUvJHtjb21tZW50X2lkfWAsCiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogIkJlYXJlciAiLmNvbmNhdChpZFRva2VuKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGpzb246IHRydWUKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICByZXMgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgcmVzKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWU0KTsKICAgIH0pKSgpOwogIH0sCiAgZGVsZXRlQ29tbWVudDogZnVuY3Rpb24gZGVsZXRlQ29tbWVudChjb21tZW50X2lkKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgdmFyIHJlczsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zKHsKICAgICAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsCiAgICAgICAgICAgICAgICB1cmw6ICJodHRwOi8vbG9jYWxob3N0OjgwODAvdjEvY29tbWVudHMvZGVsZXRlT25lLyIuY29uY2F0KGNvbW1lbnRfaWQpIC8vIHVybDogYGh0dHBzOi8vYXBpLmFsZ29ib2FyZC5jb20vdjEvY29tbWVudHMvZGVsZXRlT25lLyR7Y29tbWVudF9pZH1gLAogICAgICAgICAgICAgICAgLy8gZGF0YTogeyBhbnN3ZXI6IDQyIH0KCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQ1LnNlbnQ7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIsIHJlcyk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlNSk7CiAgICB9KSkoKTsKICB9Cn07"},{"version":3,"sources":["/Users/mac/Documents/Projects/GADS/frontend/src/services/commentsApi.js"],"names":["axios","getComments","idToken","method","url","headers","json","res","addComment","params","updateComment","id","data","JSON","stringify","getComment","comment_id","deleteComment"],"mappings":"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","sourcesContent":["'use strict'\n\n// import api from '@/services/api'\nimport axios from 'axios'\n\nexport default {\n\tasync getComments (idToken) {\n\t\t// return api().get(`comments/fetchAll`);\n\t\tconst res = await axios({\n\t\t\tmethod: 'get',\n\t\t\turl: `http://localhost:8080/v1/comments/fetchAll`,\n\t\t\t// url: `https://api.algoboard.com/v1/comments/fetchAll`,\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Authorization': `Bearer ${idToken}`,\n\t\t\t},\n\t\t\tjson: true,\n\t\t});\n\t\treturn res;\n\t},\n\tasync addComment (idToken, params) {\n\t\t// return api().post(`comments/addOne`, params);\n\t\tconst res = await axios({\n\t\t\tmethod: 'post',\n\t\t\turl: `http://localhost:8080/v1/comments/addOne`,\n\t\t\t// url: `https://api.algoboard.com/v1/comments/addOne`,\n\t\t\t// data: params,\n\t\t\tparams: params,\n\t\t\theaders: { \n\t\t\t\t'content-type': 'application/json', \n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Authorization': `Bearer ${idToken}`, \n\t\t\t},\n\t\t\tjson: true,\n\t\t});\n\t\treturn res;\n\t},\n\tasync updateComment (idToken, params) {\n\t\t// return api().put(`comments/updateOne/${params.id}`, params);\n\t\tconst res = await axios({\n\t\t\tmethod: 'put',\n\t\t\turl: `http://localhost:8080/v1/comments/updateOne/${params.id}`,\n\t\t\t// url: `https://api.algoboard.com/v1/comments/updateOne/${params.id}`,\n\t\t\tdata: JSON.stringify(params),\n\t\t\theaders: { \n\t\t\t\t'content-type': 'application/json', \n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Authorization': `Bearer ${idToken}`, \n\t\t\t},\n\t\t\tjson: true,\n\t\t});\n\t\treturn res;\n\t},\n\tasync getComment (comment_id, idToken) {\n\t\t// return api().get(`comments/fetchOne/${comment_id}`);\n\t\tconst res = await axios({\n\t\t\tmethod: 'get',\n\t\t\turl: `http://localhost:8080/v1/projects/fetchOne/${comment_id}`,\n\t\t\t// url: `https://api.algoboard.com/v1/comments/fetchOne/${comment_id}`,\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Authorization': `Bearer ${idToken}`,\n\t\t\t},\n\t\t\tjson: true,\n\t\t});\n\t\treturn res;\n\t},\n\tasync deleteComment (comment_id) {\n        // return api().delete(`comments/deleteOne/${comment_id}`);\n        const res = await axios({\n            method: 'DELETE',\n\t\t\turl: `http://localhost:8080/v1/comments/deleteOne/${comment_id}`,\n\t\t\t// url: `https://api.algoboard.com/v1/comments/deleteOne/${comment_id}`,\n            // data: { answer: 42 }\n        })\n        return res;\n\t},\n}"]}]}