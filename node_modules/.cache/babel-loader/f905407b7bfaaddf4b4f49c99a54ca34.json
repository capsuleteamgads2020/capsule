{"remainingRequest":"/Users/mac/Documents/Projects/GADS2020/frontend/node_modules/babel-loader/lib/index.js!/Users/mac/Documents/Projects/GADS2020/frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/mac/Documents/Projects/GADS2020/frontend/src/services/groupsApi.js","dependencies":[{"path":"/Users/mac/Documents/Projects/GADS2020/frontend/src/services/groupsApi.js","mtime":1603954444410},{"path":"/Users/mac/Documents/Projects/GADS2020/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Documents/Projects/GADS2020/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mac/Documents/Projects/GADS2020/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:J3VzZSBzdHJpY3QnOyAvLyBpbXBvcnQgYXBpIGZyb20gJ0Avc2VydmljZXMvYXBpJwoKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL21hYy9Eb2N1bWVudHMvUHJvamVjdHMvR0FEUzIwMjAvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnOwpleHBvcnQgZGVmYXVsdCB7CiAgZ2V0R3JvdXBzOiBmdW5jdGlvbiBnZXRHcm91cHMoaWRUb2tlbikgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgdmFyIHJlczsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBheGlvcyh7CiAgICAgICAgICAgICAgICBtZXRob2Q6ICdnZXQnLAogICAgICAgICAgICAgICAgdXJsOiAiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3YxL2dyb3Vwcy9mZXRjaEFsbCIsCiAgICAgICAgICAgICAgICAvLyB1cmw6IGBodHRwczovL2FwaS5hbGdvYm9hcmQuY29tL3YxL2dyb3Vwcy9mZXRjaEFsbGAsCiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogIkJlYXJlciAiLmNvbmNhdChpZFRva2VuKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGpzb246IHRydWUKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICByZXMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHJlcyk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpKCk7CiAgfSwKICBhZGRHcm91cDogZnVuY3Rpb24gYWRkR3JvdXAoaWRUb2tlbiwgcGFyYW1zKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgdmFyIHJlczsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zKHsKICAgICAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLAogICAgICAgICAgICAgICAgdXJsOiAiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3YxL2dyb3Vwcy9hZGRPbmUiLAogICAgICAgICAgICAgICAgLy8gdXJsOiBgaHR0cHM6Ly9hcGkuYWxnb2JvYXJkLmNvbS92MS9ncm91cHMvYWRkT25lYCwKICAgICAgICAgICAgICAgIC8vIGRhdGE6IHBhcmFtcywKICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLAogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICJCZWFyZXIgIi5jb25jYXQoaWRUb2tlbikKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBqc29uOiB0cnVlCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIHJlcyk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMik7CiAgICB9KSkoKTsKICB9LAogIHVwZGF0ZUdyb3VwOiBmdW5jdGlvbiB1cGRhdGVHcm91cChpZFRva2VuLCBwYXJhbXMpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICB2YXIgcmVzOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MoewogICAgICAgICAgICAgICAgbWV0aG9kOiAncHV0JywKICAgICAgICAgICAgICAgIHVybDogImh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC92MS9ncm91cHMvdXBkYXRlT25lLyIuY29uY2F0KHBhcmFtcy5pZCksCiAgICAgICAgICAgICAgICAvLyB1cmw6IGBodHRwczovL2FwaS5hbGdvYm9hcmQuY29tL3YxL2dyb3Vwcy91cGRhdGVPbmUvJHtwYXJhbXMuaWR9YCwKICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHBhcmFtcyksCiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogIkJlYXJlciAiLmNvbmNhdChpZFRva2VuKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGpzb246IHRydWUKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICByZXMgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgcmVzKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUzKTsKICAgIH0pKSgpOwogIH0sCiAgZ2V0R3JvdXA6IGZ1bmN0aW9uIGdldEdyb3VwKGdyb3VwX2lkLCBpZFRva2VuKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgICAgdmFyIHJlczsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zKHsKICAgICAgICAgICAgICAgIG1ldGhvZDogJ2dldCcsCiAgICAgICAgICAgICAgICB1cmw6ICJodHRwOi8vbG9jYWxob3N0OjgwODAvdjEvcHJvamVjdHMvZmV0Y2hPbmUvIi5jb25jYXQoZ3JvdXBfaWQpLAogICAgICAgICAgICAgICAgLy8gdXJsOiBgaHR0cHM6Ly9hcGkuYWxnb2JvYXJkLmNvbS92MS9ncm91cHMvZmV0Y2hPbmUvJHtncm91cF9pZH1gLAogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICJCZWFyZXIgIi5jb25jYXQoaWRUb2tlbikKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBqc29uOiB0cnVlCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQ0LnNlbnQ7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsIHJlcyk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlNCk7CiAgICB9KSkoKTsKICB9LAogIGRlbGV0ZUdyb3VwOiBmdW5jdGlvbiBkZWxldGVHcm91cChncm91cF9pZCkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoKSB7CiAgICAgIHZhciByZXM7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBheGlvcyh7CiAgICAgICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLAogICAgICAgICAgICAgICAgdXJsOiAiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3YxL2dyb3Vwcy9kZWxldGVPbmUvIi5jb25jYXQoZ3JvdXBfaWQpIC8vIHVybDogYGh0dHBzOi8vYXBpLmFsZ29ib2FyZC5jb20vdjEvZ3JvdXBzL2RlbGV0ZU9uZS8ke2dyb3VwX2lkfWAsCiAgICAgICAgICAgICAgICAvLyBkYXRhOiB7IGFuc3dlcjogNDIgfQoKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICByZXMgPSBfY29udGV4dDUuc2VudDsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwgcmVzKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWU1KTsKICAgIH0pKSgpOwogIH0KfTs="},{"version":3,"sources":["/Users/mac/Documents/Projects/GADS2020/frontend/src/services/groupsApi.js"],"names":["axios","getGroups","idToken","method","url","headers","json","res","addGroup","params","updateGroup","id","data","JSON","stringify","getGroup","group_id","deleteGroup"],"mappings":"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","sourcesContent":["'use strict'\n\n// import api from '@/services/api'\nimport axios from 'axios'\n\nexport default {\n\tasync getGroups (idToken) {\n\t\t// return api().get(`groups/fetchAll`);\n\t\tconst res = await axios({\n\t\t\tmethod: 'get',\n\t\t\turl: `http://localhost:8080/v1/groups/fetchAll`,\n\t\t\t// url: `https://api.algoboard.com/v1/groups/fetchAll`,\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Authorization': `Bearer ${idToken}`,\n\t\t\t},\n\t\t\tjson: true,\n\t\t});\n\t\treturn res;\n\t},\n\tasync addGroup (idToken, params) {\n\t\t// return api().post(`groups/addOne`, params);\n\t\tconst res = await axios({\n\t\t\tmethod: 'post',\n\t\t\turl: `http://localhost:8080/v1/groups/addOne`,\n\t\t\t// url: `https://api.algoboard.com/v1/groups/addOne`,\n\t\t\t// data: params,\n\t\t\tparams: params,\n\t\t\theaders: { \n\t\t\t\t'content-type': 'application/json', \n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Authorization': `Bearer ${idToken}`, \n\t\t\t},\n\t\t\tjson: true,\n\t\t});\n\t\treturn res;\n\t},\n\tasync updateGroup (idToken, params) {\n\t\t// return api().put(`groups/updateOne/${params.id}`, params);\n\t\tconst res = await axios({\n\t\t\tmethod: 'put',\n\t\t\turl: `http://localhost:8080/v1/groups/updateOne/${params.id}`,\n\t\t\t// url: `https://api.algoboard.com/v1/groups/updateOne/${params.id}`,\n\t\t\tdata: JSON.stringify(params),\n\t\t\theaders: { \n\t\t\t\t'content-type': 'application/json', \n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Authorization': `Bearer ${idToken}`, \n\t\t\t},\n\t\t\tjson: true,\n\t\t});\n\t\treturn res;\n\t},\n\tasync getGroup (group_id, idToken) {\n\t\t// return api().get(`groups/fetchOne/${group_id}`);\n\t\tconst res = await axios({\n\t\t\tmethod: 'get',\n\t\t\turl: `http://localhost:8080/v1/projects/fetchOne/${group_id}`,\n\t\t\t// url: `https://api.algoboard.com/v1/groups/fetchOne/${group_id}`,\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Authorization': `Bearer ${idToken}`,\n\t\t\t},\n\t\t\tjson: true,\n\t\t});\n\t\treturn res;\n\t},\n\tasync deleteGroup (group_id) {\n        // return api().delete(`groups/deleteOne/${group_id}`);\n        const res = await axios({\n            method: 'DELETE',\n\t\t\turl: `http://localhost:8080/v1/groups/deleteOne/${group_id}`,\n\t\t\t// url: `https://api.algoboard.com/v1/groups/deleteOne/${group_id}`,\n            // data: { answer: 42 }\n        })\n        return res;\n\t},\n}"]}]}